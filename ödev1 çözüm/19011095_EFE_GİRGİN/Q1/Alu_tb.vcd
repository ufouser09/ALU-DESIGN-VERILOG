$date
	Thu Apr 04 02:59:35 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU_32bit_TB $end
$var wire 1 ! Zero $end
$var wire 4 " Result [3:0] $end
$var wire 1 # Overflow $end
$var parameter 32 $ MAX_TESTS $end
$var parameter 32 % WIDTH $end
$var reg 4 & A [3:0] $end
$var reg 3 ' ALUControl [2:0] $end
$var reg 4 ( B [3:0] $end
$var integer 32 ) test_num [31:0] $end
$scope module ALU_inst $end
$var wire 32 * A [31:0] $end
$var wire 3 + ALUControl [2:0] $end
$var wire 32 , B [31:0] $end
$var wire 32 - and_result [31:0] $end
$var wire 1 . ext_num $end
$var wire 32 / xor_result [31:0] $end
$var wire 32 0 sub_result [31:0] $end
$var wire 1 1 slt_result $end
$var wire 32 2 ext [31:0] $end
$var wire 1 3 cout $end
$var wire 32 4 add_result [31:0] $end
$var wire 1 ! Zero $end
$var reg 1 # Overflow $end
$var reg 32 5 Result [31:0] $end
$scope module adder $end
$var wire 32 6 num1 [31:0] $end
$var wire 32 7 num2 [31:0] $end
$var wire 32 8 result [31:0] $end
$var wire 32 9 sum [31:0] $end
$var wire 1 3 cout $end
$var wire 32 : carry [31:0] $end
$scope module fba0 $end
$var wire 4 ; num1 [3:0] $end
$var wire 4 < num2 [3:0] $end
$var wire 4 = result [3:0] $end
$var wire 4 > sum [3:0] $end
$var wire 1 ? cout $end
$var wire 4 @ carry [3:0] $end
$scope module oba1 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C carry $end
$var wire 1 D cin $end
$var wire 1 E sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 H carry $end
$var wire 1 I cin $end
$var wire 1 J sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 M carry $end
$var wire 1 N cin $end
$var wire 1 O sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 ? carry $end
$var wire 1 R cin $end
$var wire 1 S sum $end
$upscope $end
$upscope $end
$scope module fba1 $end
$var wire 4 T num1 [3:0] $end
$var wire 4 U num2 [3:0] $end
$var wire 4 V result [3:0] $end
$var wire 4 W sum [3:0] $end
$var wire 1 X cout $end
$var wire 4 Y carry [3:0] $end
$scope module oba1 $end
$var wire 1 Z a $end
$var wire 1 [ b $end
$var wire 1 \ carry $end
$var wire 1 ] cin $end
$var wire 1 ^ sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 _ a $end
$var wire 1 ` b $end
$var wire 1 a carry $end
$var wire 1 b cin $end
$var wire 1 c sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 f carry $end
$var wire 1 g cin $end
$var wire 1 h sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 X carry $end
$var wire 1 k cin $end
$var wire 1 l sum $end
$upscope $end
$upscope $end
$scope module fba2 $end
$var wire 4 m num1 [3:0] $end
$var wire 4 n num2 [3:0] $end
$var wire 4 o result [3:0] $end
$var wire 4 p sum [3:0] $end
$var wire 1 q cout $end
$var wire 4 r carry [3:0] $end
$scope module oba1 $end
$var wire 1 s a $end
$var wire 1 t b $end
$var wire 1 u carry $end
$var wire 1 v cin $end
$var wire 1 w sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z carry $end
$var wire 1 { cin $end
$var wire 1 | sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 } a $end
$var wire 1 ~ b $end
$var wire 1 !" carry $end
$var wire 1 "" cin $end
$var wire 1 #" sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 $" a $end
$var wire 1 %" b $end
$var wire 1 q carry $end
$var wire 1 &" cin $end
$var wire 1 '" sum $end
$upscope $end
$upscope $end
$scope module fba3 $end
$var wire 4 (" num1 [3:0] $end
$var wire 4 )" num2 [3:0] $end
$var wire 4 *" result [3:0] $end
$var wire 4 +" sum [3:0] $end
$var wire 1 ," cout $end
$var wire 4 -" carry [3:0] $end
$scope module oba1 $end
$var wire 1 ." a $end
$var wire 1 /" b $end
$var wire 1 0" carry $end
$var wire 1 1" cin $end
$var wire 1 2" sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 3" a $end
$var wire 1 4" b $end
$var wire 1 5" carry $end
$var wire 1 6" cin $end
$var wire 1 7" sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 8" a $end
$var wire 1 9" b $end
$var wire 1 :" carry $end
$var wire 1 ;" cin $end
$var wire 1 <" sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 =" a $end
$var wire 1 >" b $end
$var wire 1 ," carry $end
$var wire 1 ?" cin $end
$var wire 1 @" sum $end
$upscope $end
$upscope $end
$scope module fba4 $end
$var wire 4 A" num1 [3:0] $end
$var wire 4 B" num2 [3:0] $end
$var wire 4 C" result [3:0] $end
$var wire 4 D" sum [3:0] $end
$var wire 1 E" cout $end
$var wire 4 F" carry [3:0] $end
$scope module oba1 $end
$var wire 1 G" a $end
$var wire 1 H" b $end
$var wire 1 I" carry $end
$var wire 1 J" cin $end
$var wire 1 K" sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 L" a $end
$var wire 1 M" b $end
$var wire 1 N" carry $end
$var wire 1 O" cin $end
$var wire 1 P" sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 Q" a $end
$var wire 1 R" b $end
$var wire 1 S" carry $end
$var wire 1 T" cin $end
$var wire 1 U" sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 V" a $end
$var wire 1 W" b $end
$var wire 1 E" carry $end
$var wire 1 X" cin $end
$var wire 1 Y" sum $end
$upscope $end
$upscope $end
$scope module fba5 $end
$var wire 4 Z" num1 [3:0] $end
$var wire 4 [" num2 [3:0] $end
$var wire 4 \" result [3:0] $end
$var wire 4 ]" sum [3:0] $end
$var wire 1 ^" cout $end
$var wire 4 _" carry [3:0] $end
$scope module oba1 $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 b" carry $end
$var wire 1 c" cin $end
$var wire 1 d" sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 e" a $end
$var wire 1 f" b $end
$var wire 1 g" carry $end
$var wire 1 h" cin $end
$var wire 1 i" sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 j" a $end
$var wire 1 k" b $end
$var wire 1 l" carry $end
$var wire 1 m" cin $end
$var wire 1 n" sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 o" a $end
$var wire 1 p" b $end
$var wire 1 ^" carry $end
$var wire 1 q" cin $end
$var wire 1 r" sum $end
$upscope $end
$upscope $end
$scope module fba6 $end
$var wire 4 s" num1 [3:0] $end
$var wire 4 t" num2 [3:0] $end
$var wire 4 u" result [3:0] $end
$var wire 4 v" sum [3:0] $end
$var wire 1 w" cout $end
$var wire 4 x" carry [3:0] $end
$scope module oba1 $end
$var wire 1 y" a $end
$var wire 1 z" b $end
$var wire 1 {" carry $end
$var wire 1 |" cin $end
$var wire 1 }" sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 ~" a $end
$var wire 1 !# b $end
$var wire 1 "# carry $end
$var wire 1 ## cin $end
$var wire 1 $# sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 %# a $end
$var wire 1 &# b $end
$var wire 1 '# carry $end
$var wire 1 (# cin $end
$var wire 1 )# sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 *# a $end
$var wire 1 +# b $end
$var wire 1 w" carry $end
$var wire 1 ,# cin $end
$var wire 1 -# sum $end
$upscope $end
$upscope $end
$scope module fba7 $end
$var wire 4 .# num1 [3:0] $end
$var wire 4 /# num2 [3:0] $end
$var wire 4 0# result [3:0] $end
$var wire 4 1# sum [3:0] $end
$var wire 1 3 cout $end
$var wire 4 2# carry [3:0] $end
$scope module oba1 $end
$var wire 1 3# a $end
$var wire 1 4# b $end
$var wire 1 5# carry $end
$var wire 1 6# cin $end
$var wire 1 7# sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 8# a $end
$var wire 1 9# b $end
$var wire 1 :# carry $end
$var wire 1 ;# cin $end
$var wire 1 <# sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 =# a $end
$var wire 1 ># b $end
$var wire 1 ?# carry $end
$var wire 1 @# cin $end
$var wire 1 A# sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 B# a $end
$var wire 1 C# b $end
$var wire 1 3 carry $end
$var wire 1 D# cin $end
$var wire 1 E# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module extender $end
$var wire 1 . in $end
$var wire 32 F# out [31:0] $end
$upscope $end
$scope module subtractor $end
$var wire 32 G# num1 [31:0] $end
$var wire 32 H# num2 [31:0] $end
$var wire 32 I# result [31:0] $end
$var wire 32 J# sum [31:0] $end
$var wire 1 K# cout $end
$var wire 32 L# carry [31:0] $end
$scope module fba0 $end
$var wire 4 M# num1 [3:0] $end
$var wire 4 N# num2 [3:0] $end
$var wire 4 O# result [3:0] $end
$var wire 4 P# sum [3:0] $end
$var wire 1 Q# cout $end
$var wire 4 R# carry [3:0] $end
$scope module oba1 $end
$var wire 1 S# a $end
$var wire 1 T# b $end
$var wire 1 U# carry $end
$var wire 1 V# cin $end
$var wire 1 W# sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 X# a $end
$var wire 1 Y# b $end
$var wire 1 Z# carry $end
$var wire 1 [# cin $end
$var wire 1 \# sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 ]# a $end
$var wire 1 ^# b $end
$var wire 1 _# carry $end
$var wire 1 `# cin $end
$var wire 1 a# sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 b# a $end
$var wire 1 c# b $end
$var wire 1 Q# carry $end
$var wire 1 d# cin $end
$var wire 1 e# sum $end
$upscope $end
$upscope $end
$scope module fba1 $end
$var wire 4 f# num1 [3:0] $end
$var wire 4 g# num2 [3:0] $end
$var wire 4 h# result [3:0] $end
$var wire 4 i# sum [3:0] $end
$var wire 1 j# cout $end
$var wire 4 k# carry [3:0] $end
$scope module oba1 $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 n# carry $end
$var wire 1 o# cin $end
$var wire 1 p# sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 q# a $end
$var wire 1 r# b $end
$var wire 1 s# carry $end
$var wire 1 t# cin $end
$var wire 1 u# sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 v# a $end
$var wire 1 w# b $end
$var wire 1 x# carry $end
$var wire 1 y# cin $end
$var wire 1 z# sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 {# a $end
$var wire 1 |# b $end
$var wire 1 j# carry $end
$var wire 1 }# cin $end
$var wire 1 ~# sum $end
$upscope $end
$upscope $end
$scope module fba2 $end
$var wire 4 !$ num1 [3:0] $end
$var wire 4 "$ num2 [3:0] $end
$var wire 4 #$ result [3:0] $end
$var wire 4 $$ sum [3:0] $end
$var wire 1 %$ cout $end
$var wire 4 &$ carry [3:0] $end
$scope module oba1 $end
$var wire 1 '$ a $end
$var wire 1 ($ b $end
$var wire 1 )$ carry $end
$var wire 1 *$ cin $end
$var wire 1 +$ sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 ,$ a $end
$var wire 1 -$ b $end
$var wire 1 .$ carry $end
$var wire 1 /$ cin $end
$var wire 1 0$ sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 1$ a $end
$var wire 1 2$ b $end
$var wire 1 3$ carry $end
$var wire 1 4$ cin $end
$var wire 1 5$ sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 6$ a $end
$var wire 1 7$ b $end
$var wire 1 %$ carry $end
$var wire 1 8$ cin $end
$var wire 1 9$ sum $end
$upscope $end
$upscope $end
$scope module fba3 $end
$var wire 4 :$ num1 [3:0] $end
$var wire 4 ;$ num2 [3:0] $end
$var wire 4 <$ result [3:0] $end
$var wire 4 =$ sum [3:0] $end
$var wire 1 >$ cout $end
$var wire 4 ?$ carry [3:0] $end
$scope module oba1 $end
$var wire 1 @$ a $end
$var wire 1 A$ b $end
$var wire 1 B$ carry $end
$var wire 1 C$ cin $end
$var wire 1 D$ sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 E$ a $end
$var wire 1 F$ b $end
$var wire 1 G$ carry $end
$var wire 1 H$ cin $end
$var wire 1 I$ sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 J$ a $end
$var wire 1 K$ b $end
$var wire 1 L$ carry $end
$var wire 1 M$ cin $end
$var wire 1 N$ sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 O$ a $end
$var wire 1 P$ b $end
$var wire 1 >$ carry $end
$var wire 1 Q$ cin $end
$var wire 1 R$ sum $end
$upscope $end
$upscope $end
$scope module fba4 $end
$var wire 4 S$ num1 [3:0] $end
$var wire 4 T$ num2 [3:0] $end
$var wire 4 U$ result [3:0] $end
$var wire 4 V$ sum [3:0] $end
$var wire 1 W$ cout $end
$var wire 4 X$ carry [3:0] $end
$scope module oba1 $end
$var wire 1 Y$ a $end
$var wire 1 Z$ b $end
$var wire 1 [$ carry $end
$var wire 1 \$ cin $end
$var wire 1 ]$ sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 ^$ a $end
$var wire 1 _$ b $end
$var wire 1 `$ carry $end
$var wire 1 a$ cin $end
$var wire 1 b$ sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 c$ a $end
$var wire 1 d$ b $end
$var wire 1 e$ carry $end
$var wire 1 f$ cin $end
$var wire 1 g$ sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 h$ a $end
$var wire 1 i$ b $end
$var wire 1 W$ carry $end
$var wire 1 j$ cin $end
$var wire 1 k$ sum $end
$upscope $end
$upscope $end
$scope module fba5 $end
$var wire 4 l$ num1 [3:0] $end
$var wire 4 m$ num2 [3:0] $end
$var wire 4 n$ result [3:0] $end
$var wire 4 o$ sum [3:0] $end
$var wire 1 p$ cout $end
$var wire 4 q$ carry [3:0] $end
$scope module oba1 $end
$var wire 1 r$ a $end
$var wire 1 s$ b $end
$var wire 1 t$ carry $end
$var wire 1 u$ cin $end
$var wire 1 v$ sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 w$ a $end
$var wire 1 x$ b $end
$var wire 1 y$ carry $end
$var wire 1 z$ cin $end
$var wire 1 {$ sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 |$ a $end
$var wire 1 }$ b $end
$var wire 1 ~$ carry $end
$var wire 1 !% cin $end
$var wire 1 "% sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 #% a $end
$var wire 1 $% b $end
$var wire 1 p$ carry $end
$var wire 1 %% cin $end
$var wire 1 &% sum $end
$upscope $end
$upscope $end
$scope module fba6 $end
$var wire 4 '% num1 [3:0] $end
$var wire 4 (% num2 [3:0] $end
$var wire 4 )% result [3:0] $end
$var wire 4 *% sum [3:0] $end
$var wire 1 +% cout $end
$var wire 4 ,% carry [3:0] $end
$scope module oba1 $end
$var wire 1 -% a $end
$var wire 1 .% b $end
$var wire 1 /% carry $end
$var wire 1 0% cin $end
$var wire 1 1% sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 2% a $end
$var wire 1 3% b $end
$var wire 1 4% carry $end
$var wire 1 5% cin $end
$var wire 1 6% sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 7% a $end
$var wire 1 8% b $end
$var wire 1 9% carry $end
$var wire 1 :% cin $end
$var wire 1 ;% sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 <% a $end
$var wire 1 =% b $end
$var wire 1 +% carry $end
$var wire 1 >% cin $end
$var wire 1 ?% sum $end
$upscope $end
$upscope $end
$scope module fba7 $end
$var wire 4 @% num1 [3:0] $end
$var wire 4 A% num2 [3:0] $end
$var wire 4 B% result [3:0] $end
$var wire 4 C% sum [3:0] $end
$var wire 1 K# cout $end
$var wire 4 D% carry [3:0] $end
$scope module oba1 $end
$var wire 1 E% a $end
$var wire 1 F% b $end
$var wire 1 G% carry $end
$var wire 1 H% cin $end
$var wire 1 I% sum $end
$upscope $end
$scope module oba2 $end
$var wire 1 J% a $end
$var wire 1 K% b $end
$var wire 1 L% carry $end
$var wire 1 M% cin $end
$var wire 1 N% sum $end
$upscope $end
$scope module oba3 $end
$var wire 1 O% a $end
$var wire 1 P% b $end
$var wire 1 Q% carry $end
$var wire 1 R% cin $end
$var wire 1 S% sum $end
$upscope $end
$scope module oba4 $end
$var wire 1 T% a $end
$var wire 1 U% b $end
$var wire 1 K# carry $end
$var wire 1 V% cin $end
$var wire 1 W% sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 %
b101 $
$end
#0
$dumpvars
xW%
0V%
xU%
0T%
xS%
0R%
0Q%
xP%
0O%
xN%
0M%
0L%
xK%
0J%
xI%
0H%
0G%
xF%
0E%
bz000 D%
bx C%
bx B%
bx A%
b0 @%
x?%
0>%
x=%
0<%
x;%
0:%
09%
x8%
07%
x6%
05%
04%
x3%
02%
x1%
00%
0/%
x.%
0-%
bz000 ,%
0+%
bx *%
bx )%
bx (%
b0 '%
x&%
0%%
x$%
0#%
x"%
0!%
0~$
x}$
0|$
x{$
0z$
0y$
xx$
0w$
xv$
0u$
0t$
xs$
0r$
bz000 q$
0p$
bx o$
bx n$
bx m$
b0 l$
xk$
0j$
xi$
0h$
xg$
0f$
0e$
xd$
0c$
xb$
0a$
0`$
x_$
0^$
x]$
0\$
0[$
xZ$
0Y$
bz000 X$
0W$
bx V$
bx U$
bx T$
b0 S$
xR$
0Q$
xP$
0O$
xN$
0M$
0L$
xK$
0J$
xI$
0H$
0G$
xF$
0E$
xD$
0C$
0B$
xA$
0@$
bz000 ?$
0>$
bx =$
bx <$
bx ;$
b0 :$
x9$
08$
x7$
06$
x5$
04$
03$
x2$
01$
x0$
0/$
0.$
x-$
0,$
x+$
0*$
0)$
x($
0'$
bz000 &$
0%$
bx $$
bx #$
bx "$
b0 !$
x~#
0}#
x|#
0{#
xz#
0y#
0x#
xw#
0v#
xu#
0t#
0s#
xr#
0q#
xp#
0o#
0n#
xm#
0l#
bz000 k#
0j#
bx i#
bx h#
bx g#
b0 f#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
0V#
xU#
xT#
xS#
bzxxx R#
xQ#
bx P#
bx O#
bx N#
bx M#
bz000000x L#
0K#
bx J#
bx I#
bx H#
b0xxxx G#
b0 F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
bz000 2#
b0 1#
b0 0#
b0 /#
b0 .#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
bz000 x"
0w"
b0 v"
b0 u"
b0 t"
b0 s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
bz000 _"
0^"
b0 ]"
b0 \"
b0 ["
b0 Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
bz000 F"
0E"
b0 D"
b0 C"
b0 B"
b0 A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
bz000 -"
0,"
b0 +"
b0 *"
b0 )"
b0 ("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
bz000 r
0q
b0 p
b0 o
b0 n
b0 m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
bz000 Y
0X
b0 W
b0 V
b0 U
b0 T
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
0D
xC
xB
xA
bzxxx @
x?
bx >
bx =
bx <
bx ;
bz000000x :
b0xxxx 9
b0xxxx 8
b0xxxx 7
b0xxxx 6
b0 5
b0xxxx 4
03
b0 2
x1
bx 0
b0xxxx /
0.
b0xxxx -
b0xxxx ,
bx +
b0xxxx *
b0 )
bx (
bx '
bx &
0#
b0 "
1!
$end
#10000
bz0000000 :
0?
0e#
1S
0d#
0\#
0R
0_#
0[#
0M
0J
1a#
0U#
bz0000001 L#
1Q#
1O
0I
0`#
b101 O#
b101 P#
1W#
1p#
1u#
1z#
b1111 h#
b1111 i#
1~#
1+$
10$
15$
b1111 #$
b1111 $$
19$
1D$
1I$
1N$
b1111 <$
b1111 =$
1R$
1]$
1b$
1g$
b1111 U$
b1111 V$
1k$
1v$
1{$
1"%
b1111 n$
b1111 o$
1&%
11%
16%
1;%
b1111 )%
b1111 *%
1?%
1I%
1N%
1S%
b11111111111111111111111111110101 0
b11111111111111111111111111110101 I#
b11111111111111111111111111110101 J#
b1111 B%
b1111 C%
1W%
0N
0C
bz000 R#
0Z#
bz000 @
0H
b1101 4
b1101 8
b1101 9
b1101 =
b1101 >
1E
0T#
0Y#
1^#
1c#
1m#
1r#
1w#
1|#
1($
1-$
12$
17$
1A$
1F$
1K$
1P$
1Z$
1_$
1d$
1i$
1s$
1x$
1}$
1$%
1.%
13%
18%
1=%
1F%
1K%
1P%
1U%
b1100 N#
b1111 g#
b1111 "$
b1111 ;$
b1111 T$
b1111 m$
b1111 (%
b1111 A%
0B
0G
1L
0Q
1A
0F
0K
1P
1S#
0X#
0]#
1b#
b1101 "
b11111111111111111111111111111100 H#
b100 <
b0 -
b1101 /
b1001 ;
b1001 M#
0!
b1101 5
b0 '
b0 +
01
b100 ,
b100 7
b100 (
b1001 *
b1001 6
b1001 G#
b1001 &
#30000
b1 )
#40000
0a#
bz0000000 L#
0Q#
0O
b1011 4
b1011 8
b1011 9
b1011 =
b1011 >
1J
1\#
b11111111111111111111111111111011 0
b11111111111111111111111111111011 I#
b11111111111111111111111111111011 J#
b1011 O#
b1011 P#
1e#
0^#
b1000 N#
0L
1Q
1F
0P
1X#
0b#
b0 "
b11111111111111111111111111111000 H#
b1000 <
b1011 /
b11 ;
b11 M#
1!
b0 5
b100 '
b100 +
b1000 ,
b1000 7
b1000 (
11
b11 *
b11 6
b11 G#
b11 &
#60000
b10 )
#70000
b11 O#
b11 P#
0e#
0p#
0u#
0z#
b0 h#
b0 i#
0~#
0+$
00$
05$
b0 #$
b0 $$
09$
0D$
0I$
0N$
b0 <$
b0 =$
0R$
0]$
0b$
0g$
b0 U$
b0 V$
0k$
0v$
0{$
0"%
b0 n$
b0 o$
0&%
01%
06%
0;%
b0 )%
b0 *%
0?%
0I%
0N%
0S%
b11 0
b11 I#
b11 J#
b0 B%
b0 C%
0W%
b11 4
b11 8
b11 9
b11 =
b11 >
0S
0c#
0m#
0r#
0w#
0|#
0($
0-$
02$
07$
0A$
0F$
0K$
0P$
0Z$
0_$
0d$
0i$
0s$
0x$
0}$
0$%
0.%
03%
08%
0=%
0F%
0K%
0P%
0U%
b0 N#
b0 g#
b0 "$
b0 ;$
b0 T$
b0 m$
b0 (%
b0 A%
0Q
b11 "
b0 H#
b11 /
b0 <
0!
b11 5
b11 '
b11 +
01
b0 ,
b0 7
b0 (
#90000
b11 )
#100000
1a#
1p#
1u#
1z#
b1111 h#
b1111 i#
1~#
1+$
10$
15$
b1111 #$
b1111 $$
19$
1D$
1I$
1N$
b1111 <$
b1111 =$
1R$
1]$
1b$
1g$
b1111 U$
b1111 V$
1k$
1v$
1{$
1"%
b1111 n$
b1111 o$
1&%
11%
16%
1;%
b1111 )%
b1111 *%
1?%
1I%
1N%
1S%
b1111 B%
b1111 C%
1W%
bz0000001 :
1?
1W#
0\#
b11111111111111111111111111111101 0
b11111111111111111111111111111101 I#
b11111111111111111111111111111101 J#
b1101 O#
b1101 P#
1e#
1T#
1^#
1m#
1r#
1w#
1|#
1($
1-$
12$
17$
1A$
1F$
1K$
1P$
1Z$
1_$
1d$
1i$
1s$
1x$
1}$
1$%
1.%
13%
18%
1=%
1F%
1K%
1P%
1U%
b101 N#
b1111 g#
b1111 "$
b1111 ;$
b1111 T$
b1111 m$
b1111 (%
b1111 A%
1B
1G
1Q
0A
0F
1P
0S#
0X#
1b#
b11111111111111111111111111110101 H#
b1011 <
b1000 -
b1000 ;
b1000 M#
11
b1011 ,
b1011 7
b1011 (
b1000 *
b1000 6
b1000 G#
b1000 &
#120000
b100 )
#130000
0`#
0Z#
bz0000001 L#
1Q#
b1011 4
b1011 8
b1011 9
b1011 =
b1011 >
1S
0e#
1R
0[#
1d#
bz100 @
1M
0U#
bz100 R#
1_#
1W#
1\#
b11111111111111111111111111110011 0
b11111111111111111111111111110011 I#
b11111111111111111111111111110011 J#
b11 O#
b11 P#
0a#
0T#
b100 N#
0B
0G
1L
1A
1F
1K
1S#
1X#
1]#
b0 "
b11111111111111111111111111110100 H#
b1100 <
b1100 -
b1111 ;
b1111 M#
1!
b0 5
b101 '
b101 +
b1100 ,
b1100 7
b1100 (
01
b1111 *
b1111 6
b1111 G#
b1111 &
#150000
b101 )
